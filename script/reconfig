#!/usr/bin/env ruby

require 'json'
require 'yaml'
require 'fileutils'
require 'open3'

# Load Rails and RegionConfiguration (will be loaded after Rails)
require_relative '../config/environment'

# Ensure tmp directory exists
FileUtils.mkdir_p('tmp')

puts "Regenerating configuration files..."

# Helper method to check if file content has changed
def file_changed?(path, new_content)
  return true unless File.exist?(path)
  
  existing_content = File.read(path)
  existing_content != new_content
end

# Helper method to write file only if changed
def write_if_changed(path, content)
  if file_changed?(path, content)
    File.write(path, content)
    puts "   ✓ Updated #{path}"
    true
  else
    puts "   → No changes to #{path}"
    false
  end
end

# 1. Regenerate tmp/regions.json
puts "\n1. Regenerating tmp/regions.json..."
begin
  stdout, stderr, status = Open3.capture3('flyctl platform regions --json')
  if status.success?
    write_if_changed(RegionConfiguration::REGIONS_JSON_PATH, stdout)
  else
    puts "   ✗ Error generating regions.json: #{stderr}"
  end
rescue => e
  puts "   ✗ Error: #{e.message}"
end

# 2. Regenerate tmp/deployed.json
puts "\n2. Regenerating tmp/deployed.json..."
begin
  stdout, stderr, status = Open3.capture3('flyctl regions list --json')
  if status.success?
    deployed = JSON.parse(stdout)
    
    # Initialize pending structure if not present
    deployed['pending'] ||= {
      'add' => [],
      'delete' => []
    }
    
    write_if_changed(RegionConfiguration::DEPLOYED_JSON_PATH, JSON.pretty_generate(deployed))
  else
    puts "   ✗ Error generating deployed.json: #{stderr}"
  end
rescue => e
  puts "   ✗ Error: #{e.message}"
end

# 3. Regenerate db/map.yml and config/tenant/map.yml
puts "\n3. Regenerating map.yml files..."
begin
  # Set database to index.sqlite3
  ENV['DATABASE_URL'] = "sqlite3:db/index.sqlite3"
  
  # Rails environment already loaded at top of script
  
  # Generate map data using shared module
  map_data = RegionConfiguration.generate_map_data
  
  puts "   → Found #{map_data['regions'].size} deployed regions"
  puts "   → Found #{map_data['studios'].size} studio locations"
  
  # Write YAML file to db directory first
  yaml_content = YAML.dump(map_data)
  db_changed = write_if_changed('db/map.yml', yaml_content)
  
  # Then copy to config/tenant
  config_changed = write_if_changed('config/tenant/map.yml', yaml_content)
  
  # Run makemaps.js if it exists and either file was updated
  if (db_changed || config_changed) && File.exist?('utils/mapper/makemaps.js')
    puts "   → Running makemaps.js to add x,y coordinates..."
    system('node utils/mapper/makemaps.js')
  end
  
rescue => e
  puts "   ✗ Error: #{e.message}"
end

# 4. Regenerate db/showcases.yml and config/tenant/showcases.yml
puts "\n4. Regenerating showcases.yml files..."
begin
  # Rails and RegionConfiguration already loaded at top of script
  
  # Generate showcases data using shared module
  showcases_data = RegionConfiguration.generate_showcases_data
  showcases_count = showcases_data.values.map(&:size).sum
  
  puts "   → Generated data for #{showcases_count} studio/year combinations"
  
  # Convert to YAML format
  yaml_content = YAML.dump(showcases_data)
  
  # Write to db directory first
  db_changed = write_if_changed('db/showcases.yml', yaml_content)
  
  # Then copy to config/tenant
  config_changed = write_if_changed('config/tenant/showcases.yml', yaml_content)
  
rescue => e
  puts "   ✗ Error: #{e.message}"
end

puts "\nConfiguration regeneration complete!"