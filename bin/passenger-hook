#!/usr/bin/env ruby

require 'socket'
require 'fileutils'
require 'uri'
require 'net/http'

MARKTIME = "/data/db/.time"
DEMO = '/demo/db/demo.sqlite3'

if Process.uid == 0
  status = `passenger-status`
else
  status = `sudo /usr/sbin/passenger-status`
end

# get a list of processe, excluding cable processes
processes = status[/^Processes\s*:\s*(\d*)/, 1].to_i
cable = status[/^showcase-cable.*?\n\n/m]
processes -= 1 if cable and cable =~ /Sessions:\s*[1-9]/

if processes == 0
  # keep track of when demo was last updated
  if File.exist? DEMO
    if File.exist? "#{DEMO}.time"
      if File.mtime(DEMO) > File.mtime("#{DEMO}.time")
        FileUtils.touch "#{DEMO}.time"
      end
    elsif File.exist?("#{DEMO}.seed") && File.mtime(DEMO) > File.mtime("#{DEMO}.seed")
      FileUtils.touch "#{DEMO}.time"
    end
  end

  # Don't rsync if no sqlite3 files changed
  latest = Dir["/data/db/2*.sqlite3"].map {|name| File.mtime(name)}.max
  exit 0 if File.exist?(MARKTIME) && File.mtime(MARKTIME) >= latest
  FileUtils.touch MARKTIME

  # clean databases: vacuum db and truncate WAL
  Dir["/data/db/2*-wal"].select {|file| File.size(file) > 0}.each do |file|
    db = file.chomp '-wal'
    system "sqlite3 #{db} 'PRAGMA wal_checkpoint(TRUNCATE); VACUUM;'"
  end

  # ensure wal and shm files are present
  Dir["/data/db/2*.sqlite3"].each do |file|
    next if File.exist?("#{file}-shm") && File.exist?("#{file}-wal")
    system "sqlite3 #{file} 'PRAGMA journal_mode=WAL;'"
  end

  # get a list of ip addresses for running instances, with the primary region first
  addrs = [
    *`dig +short -t aaaa #{ENV['PRIMARY_REGION']}.#{ENV['FLY_APP_NAME']}.internal`.split,
    *`dig +short -t aaaa global.#{ENV['FLY_APP_NAME']}.internal`.split,
  ].uniq

  # remove current region from the list
  addrs -=
    `dig +short -t aaaa #{ENV['FLY_REGION']}.#{ENV['FLY_APP_NAME']}.internal`.split

  # rsync db and storage directories to each instance
  addrs.each do |addr|
    system *%W[
      rsync
      -av
      --update
      /data/db
      /data/storage
      rsync://[#{addr}]/data/
    ]
  end

  # run webhook
  uri = URI('https://rubix.intertwingly.net/webhook/showcase')
  res = Net::HTTP.get_response(uri)
  if res.is_a?(Net::HTTPSuccess)
    puts res.body 
  else
    STDERR.puts res
    STDERR.puts res.body 
  end
end
